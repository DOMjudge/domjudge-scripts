#!/bin/sh -e
# This script sets up MySQL master/master replication on two servers.
# Run this script as root on the secondary, backup server and specify
# the primary one as argument.
#
# The database on this server will be wiped!

PRIMARY=$1

if [ -z "$PRIMARY" ]; then
    echo "Error: specify primary host to set up master/master replication with."
    exit 1
fi

if [ $(id -un) != 'root' ]; then
    echo "Error: this script must be run as root."
    exit 1
fi

if ip addr | grep '{{DOMSERVER_IP}}' >/dev/null 2>&1 ; then
    echo "Error: this host '$(hostname)' has the primary IP '{{DOMSERVER_IP}}'."
    exit 1
fi

PRIMARY_SERVER_ID=$(ssh "$PRIMARY" "cat /etc/mysql/mariadb.conf.d/zzz_replication.cnf" | \
                    grep server_id | sed 's/.*server_id *= *//')

OUR_SERVER_ID=$(cat /etc/mysql/mariadb.conf.d/zzz_replication.cnf | \
                grep server_id | sed 's/.*server_id *= *//')

if [ -z "$PRIMARY_SERVER_ID" ]; then
    echo "Error: cannot fetch master server_id."
    exit 1
fi

if [ -z "$OUR_SERVER_ID" ]; then
    echo "Error: cannot fetch our server_id."
    exit 1
fi

get_field()
{
    local field="$1" ; shift
    local sql_info="$(printf '%s\n' "$@")"
    echo "$sql_info" | grep "$field:" | sed 's/.*: *//'
}

check_status()
{
    local sql_info="$(printf '%s\n' "$@")"
    [ $(get_field 'Seconds_Behind_Master' "$sql_info") = '0' ] || return 1
    [ $(get_field 'Slave_SQL_Running' "$sql_info") = 'Yes' ] || return 1
    [ $(get_field 'Last_SQL_Errno' "$sql_info") = '0' ] || return 1
    return 0
}

check_replication()
{
    if ! check_status "$(ssh "$PRIMARY" "mysql -e 'SHOW MASTER STATUS\G SHOW SLAVE STATUS\G'")" ||
       ! check_status "$(                mysql -e 'SHOW MASTER STATUS\G SHOW SLAVE STATUS\G')" ; then
        return 1
    fi
    return 0
}

if check_replication ; then
    echo "Replication already running."
    exit 0
fi

echo "Stopping PHP locally..."
service php7.4-fpm stop

echo "Stopping replication on $PRIMARY..."
ssh "$PRIMARY" 'mysql -e "STOP SLAVE;"'

PRIMARY_STATUS=$(ssh "$PRIMARY" "mysql -e 'SHOW MASTER STATUS\G'")
PRIMARY_BINLOG=$(get_field 'File' "$PRIMARY_STATUS")
PRIMARY_LOGPOS=$(get_field 'Position' "$PRIMARY_STATUS")

if [ -z "$PRIMARY_BINLOG" -o -z "$PRIMARY_LOGPOS" ]; then
    echo "Error: cannot fetch primary status."
    exit 1
fi

echo "Stopping MySQL locally..."
service mysql stop

echo "Copying /var/lib/mysql from '$PRIMARY', keeping old version in /var/lib/mysql-orig..."
if [ -e /var/lib/mysql-orig ]; then
    rm -rf /var/lib/mysql-orig
fi
mv /var/lib/mysql /var/lib/mysql-orig
mkdir /var/lib/mysql
ssh "$PRIMARY" "mariabackup -u root -S /var/run/mysqld/mysqld.sock --backup --slave-info --tmpdir=/tmp --stream=xbstream --parallel=4 --datadir=/var/lib/mysql 2>backup.log" \
    | pv | mbstream --directory=/var/lib/mysql -x --parallel=4
chown -R mysql:mysql /var/lib/mysql

echo "Restarting MySQL locally..."
service mysql start

echo "Starting replication locally..."
mysql -e "
CHANGE MASTER TO MASTER_HOST='{{SERVER_IP_PREFIX}}.${PRIMARY_SERVER_ID}',
                 MASTER_USER='replication',
                 MASTER_PASSWORD='{{REPLICATION_PASSWORD}}',
                 MASTER_LOG_FILE='${PRIMARY_BINLOG}',
                 MASTER_LOG_POS=${PRIMARY_LOGPOS};
START SLAVE;"

if ! mysql -e 'SHOW SLAVE STATUS\G' | grep 'Slave_SQL_Running: Yes' >/dev/null 2>&1 ; then
    echo "Error: slave SQL replication not running."
    exit 1
fi

while true ; do
    SLAVE_STATUS=$(mysql -e 'SHOW SLAVE STATUS\G')
    SLAVE_ERROR=$(get_field 'Last_Errno' "$SLAVE_STATUS")
    SLAVE_BEHIND=$(get_field 'Seconds_Behind_Master' "$SLAVE_STATUS")
    if [ "$SLAVE_BEHIND" = '0' ]; then
        break
    fi
    if [ "$SLAVE_ERROR" != '0' ]; then
        echo "Slave error: $SLAVE_ERROR"
        mysql -e "SET GLOBAL sql_slave_skip_counter=1; START SLAVE;"
        sleep 0.01
    else
        echo "Slave synchronizing, $SLAVE_BEHIND seconds behind ..."
        sleep 0.3
    fi
done

OUR_STATUS=$(mysql -e 'SHOW MASTER STATUS\G')
OUR_BINLOG=$(get_field 'File' "$OUR_STATUS")
OUR_LOGPOS=$(get_field 'Position' "$OUR_STATUS")

echo "Starting replication on $PRIMARY..."
ssh "$PRIMARY" "mysql -e '
CHANGE MASTER TO MASTER_HOST=\"{{SERVER_IP_PREFIX}}.${OUR_SERVER_ID}\",
                 MASTER_USER=\"replication\",
                 MASTER_PASSWORD=\"{{REPLICATION_PASSWORD}}\",
                 MASTER_LOG_FILE=\"${OUR_BINLOG}\",
                 MASTER_LOG_POS=${OUR_LOGPOS};
START SLAVE;'"

echo "Restarting PHP locally..."
service php7.4-fpm start

if check_replication ; then
    echo "Replication setup done."
    exit 0
fi

echo "Failed to set up replication, check manually."
exit 1
