#!/bin/sh -e
# This script sets up MySQL master/master replication on two servers.

usage()
{
	cat <<EOF
Usage: $0 <primary-host>

This script sets up MySQL master/master replication on two servers.
Run this script as root on the secondary server and specify the
primary one as argument. The databases on this server will be wiped!

This script should be run after ansible code has been run, so that
MySQL replication configuration and users are present on both machines
and a domjudge database has been initialized on <primary-host> at least.
Running this script will synchronize the databases on this host to
that on <primary-host>, including user credentials, so make sure that
etc/dbpasswords.secret contains the same credentials on each machine.

To recover a machine after it went down and a failover happened:

1. Bring the machine up again with the keepalived service stopped (it
   boots this way with the default ansible setup).

2. Make sure the machine is fully configured (using ansible).

3. Run this script as root on the machine with argument the active
   domserver. For example, if the active machine is domjudge-backup
   and this, failed machine is presumably domjudge-primary, then run:
       setup-replication domjudge-backup
   When this script completes successfully (should take ~1-3 minutes
   when using a Gbit network and about 1-5 GB database size), the two
   machines are running in master/master replication. If it fails,
   check manually, for example with the following commands on both
   hosts:
       mysql -e "SHOW SLAVE STATUS\G SHOW MASTER STATUS\G"
       ip addr
       service keepalived status

4. To fail back from domjudge-backup to domjudge-primary again, run:
       service keepalived start
   on domjudge-primary, and check that the domjudge IP correctly
   returned to domjudge-primary again.

EOF

}

PRIMARY=$1

if [ -z "$PRIMARY" ]; then
    echo "Error: specify primary host to set up master/master replication with."
    usage
    exit 1
fi

if [ $(id -un) != 'root' ]; then
    echo "Error: this script must be run as root."
    usage
    exit 1
fi

if ip addr | grep '{{DOMSERVER_IP}}' >/dev/null 2>&1 ; then
    echo "Error: this host '$(hostname)' has the primary IP '{{DOMSERVER_IP}}'."
    usage
    exit 1
fi

MYSQL_REPL_CONFIG='/etc/mysql/mariadb.conf.d/zzz_replication.cnf'

PRIMARY_SERVER_ID=$(ssh "$PRIMARY" "cat $MYSQL_REPL_CONFIG" | \
                    grep server_id | sed 's/.*server_id *= *//')

OUR_SERVER_ID=$(cat $MYSQL_REPL_CONFIG | \
                grep server_id | sed 's/.*server_id *= *//')

if [ -z "$PRIMARY_SERVER_ID" ]; then
    echo "Error: cannot fetch master server_id from '$MYSQL_REPL_CONFIG'."
    usage
    exit 1
fi

if [ -z "$OUR_SERVER_ID" ]; then
    echo "Error: cannot fetch our server_id from '$MYSQL_REPL_CONFIG'."
    usage
    exit 1
fi

get_field()
{
    local field="$1" ; shift
    local sql_info="$(printf '%s\n' "$@")"
    echo "$sql_info" | grep "$field:" | sed 's/.*: *//'
}

check_status()
{
    local sql_info="$(printf '%s\n' "$@")"
    [ $(get_field 'Seconds_Behind_Master' "$sql_info") = '0' ] || return 1
    [ $(get_field 'Slave_SQL_Running' "$sql_info") = 'Yes' ] || return 1
    [ $(get_field 'Last_SQL_Errno' "$sql_info") = '0' ] || return 1
    return 0
}

check_replication()
{
    if ! check_status "$(ssh "$PRIMARY" "mysql -e 'SHOW MASTER STATUS\G SHOW SLAVE STATUS\G'")" ||
       ! check_status "$(                mysql -e 'SHOW MASTER STATUS\G SHOW SLAVE STATUS\G')" ; then
        return 1
    fi
    return 0
}

if check_replication ; then
    echo "Replication already running."
    exit 0
fi

echo "Stopping PHP locally..."
service php7.4-fpm stop

echo "Stopping replication on $PRIMARY..."
ssh "$PRIMARY" 'mysql -e "STOP SLAVE;"'

PRIMARY_STATUS=$(ssh "$PRIMARY" "mysql -e 'SHOW MASTER STATUS\G'")
PRIMARY_BINLOG=$(get_field 'File' "$PRIMARY_STATUS")
PRIMARY_LOGPOS=$(get_field 'Position' "$PRIMARY_STATUS")

if [ -z "$PRIMARY_BINLOG" -o -z "$PRIMARY_LOGPOS" ]; then
    echo "Error: cannot fetch primary status."
    exit 1
fi

echo "Stopping MySQL locally..."
service mysql stop

echo "Copying /var/lib/mysql from '$PRIMARY', keeping old version in /var/lib/mysql-orig..."
if [ -e /var/lib/mysql-orig ]; then
    rm -rf /var/lib/mysql-orig
fi
mv /var/lib/mysql /var/lib/mysql-orig
mkdir /var/lib/mysql
ssh "$PRIMARY" "mariabackup -u root -S /var/run/mysqld/mysqld.sock --backup --slave-info --tmpdir=/tmp --stream=xbstream --parallel=4 --datadir=/var/lib/mysql 2>backup.log" \
    | pv | mbstream --directory=/var/lib/mysql -x --parallel=4
chown -R mysql:mysql /var/lib/mysql

echo "Restarting MySQL locally..."
service mysql start

echo "Starting replication locally..."
mysql -e "
CHANGE MASTER TO MASTER_HOST='{{SERVER_IP_PREFIX}}.${PRIMARY_SERVER_ID}',
                 MASTER_USER='replication',
                 MASTER_PASSWORD='{{REPLICATION_PASSWORD}}',
                 MASTER_LOG_FILE='${PRIMARY_BINLOG}',
                 MASTER_LOG_POS=${PRIMARY_LOGPOS};
START SLAVE;"

if ! mysql -e 'SHOW SLAVE STATUS\G' | grep 'Slave_SQL_Running: Yes' >/dev/null 2>&1 ; then
    echo "Error: slave SQL replication not running."
    exit 1
fi

while true ; do
    SLAVE_STATUS=$(mysql -e 'SHOW SLAVE STATUS\G')
    SLAVE_ERROR=$(get_field 'Last_Errno' "$SLAVE_STATUS")
    SLAVE_BEHIND=$(get_field 'Seconds_Behind_Master' "$SLAVE_STATUS")
    if [ "$SLAVE_BEHIND" = '0' ]; then
        break
    fi
    if [ "$SLAVE_ERROR" != '0' ]; then
        echo "Slave error: $SLAVE_ERROR"
        mysql -e "SET GLOBAL sql_slave_skip_counter=1; START SLAVE;"
        sleep 0.01
    else
        echo "Slave synchronizing, $SLAVE_BEHIND seconds behind ..."
        sleep 0.2
    fi
done

OUR_STATUS=$(mysql -e 'SHOW MASTER STATUS\G')
OUR_BINLOG=$(get_field 'File' "$OUR_STATUS")
OUR_LOGPOS=$(get_field 'Position' "$OUR_STATUS")

echo "Starting replication on $PRIMARY..."
ssh "$PRIMARY" "mysql -e '
CHANGE MASTER TO MASTER_HOST=\"{{SERVER_IP_PREFIX}}.${OUR_SERVER_ID}\",
                 MASTER_USER=\"replication\",
                 MASTER_PASSWORD=\"{{REPLICATION_PASSWORD}}\",
                 MASTER_LOG_FILE=\"${OUR_BINLOG}\",
                 MASTER_LOG_POS=${OUR_LOGPOS};
START SLAVE;'"

echo "Restarting PHP locally..."
service php7.4-fpm start

if check_replication ; then
    echo "Replication setup done."
    exit 0
fi

echo "Failed to set up replication, check manually."
exit 1
